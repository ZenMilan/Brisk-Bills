*I want to delete that old ashbritt invoice ... I should be able to !
	* THen figure out if perhaps we can disable the auto-assign on create  	
  	* Remove create_invoice_payments from create/destory
  	
  	* We need to go through and see where client balances are being handled, and make sure its using invoiced_amount - payment_amount
  	* let's start by adding a detail that shows what payments are currently allocated..
  	* Don't forget to Add the right show fields too (in the payments controller)
  	* THen we can add an edit...
  	* And then we need to add a complemntary field in the invoices view? Nah - but show which payments are currently assigned as a read-only...
  	* Then we can allow multiple invoices to be unpublished...

	* I guess I unpublish and delete it?
	* We should put proper transactions in place here too while we're in here...
	* No - let's get the damn payments applying with the interface quickbooks uses
	* We should probably allow payment updates, just do a destroy_invoice_payments and create_invoice_payments when that happens. if its the newest payment for a client.
		* Make sure the payments_test adds a test for this...

* Add Existing Client Representatives should show them in alaphabetical order

* We should add an unpublished Open Invoices controller ...

* We should put tax before cost in the activities with prices controller...

* I want to delete that old ashbritt invoice ... I should be able to !
  * Here's what I'm thinking:
  	* We remove create_invoice_payments from create/destory
  	* We add an unallocated_amount to the payments controller / view
  	* We need to go through and see where client balances are being handled, and make sure its using invoiced_amount - payment_amount
  	* let's start by adding a detail that shows what payments are currently allocated..
  	* THen we can add an edit...
  	* And then we need to add a complemntary field in the invoices view? Nah - but show which payments are currently assigned as a read-only...
  	* Then we can allow multiple invoices to be unpublished...

	* I guess I unpublish and delete it?
	* We should put proper transactions in place here too while we're in here...
	* No - let's get the damn payments applying with the interface quickbooks uses
	* We should probably allow payment updates, just do a destroy_invoice_payments and create_invoice_payments when that happens. if its the newest payment for a client.
		* Make sure the payments_test adds a test for this...

* Add better transactions throughout!

* Translate the time into the local zone for the user, probably each user/client should have a zone associtation in their account.
	*  Its already stored in UTC everywhere...
	* We need to factor this into invoices too, I think

* Public interface
	* Showing the Client eventlogs as an unedutable nested list  might be nice... Hell, employee eventlogs too....
   * CC payments handling - not a plugin

---------------
Plugin interface using engines?
---------------
LONGER-TERM: (Needs re-prioritization...)

Feature:

* I'd like some tests cases written for the view objects, make sure they work just like the non-views... ...
	* Boy this is getting hard, I think it has something to do wioth the transactions... Oddly, the tests work on their own, outside of the rake test	

* Better searches by using the search sql fields...

* See what we decide to do long-term with our model_view hack, maybe we can run tests on both models, as well as their view_models. Just one by one... I think thats smart...

Feature: Make the Search actually work the way we'd expect. Perhaps even make something mroe useful still that would let us filter records...

BUG: We should probably write a plugin that better displays delete errors in the flash[:error] , invoices is a good place for that
	* BTW - why does it show delete as an option here when we clearly can't delete some of these
	* Also- it'd be nice to show a pretty record error in the invoices update, if you try to update the activities on a published invoice
	* Create two invoices - both unpublished, try to delete the oldest one

* Use polymorphic relationship for sub activities
	* Maybe ..

* all delete confirms should go through the modal box - make this a plugin

* The ability to create an activity from the activities & invoices/activities list would be sweet
	* With a little pop-up that asks for the activity type?

* Emailer: 
	* <p>Please note that your current account balance, including this invoice, is: $XXX.XXX . Invoices 1,2, & 3 are outstanding. <red>Invoices 1 & 2 are past their 30 day </red> </p>
	* And change the if line to only send when there's been a change in the invoice status (See the invoice TODO...)
	* This gets a little complicated though - we have to decide if we're going to generate these warnings based on the date of the invoice, or the current situation
	
* The invoice issued_on date I think is rounding off to the end of the day on assignment. It should really be time sensitive.
	
* Better unit tests for Activity::* model. (too , make sure negative values work on whatever..)

Plugins for 
   * Reimbursable scanning
	* phone calls
		* The :phone_extension field, *might* be something we put into the asterisk plugin 

* An employee_rate_changed_last changed plugin would be super-useful at some point...

Nice Features:
	* Todo list.. maybe just a block? Call it an outstanding issues/projects
	* Client Notes? Probably just a google docs link
-------------------
dd if=/dev/urandom bs=200 count=1 | tr -cd 'A-Za-z0-9!@#$%^&*()_+'; echo

CREATE DATABASE `briskbills_development`;
GRANT ALL PRIVILEGES ON briskbills_development.* TO briskbills@localhost IDENTIFIED BY 'cut1ckle';

CREATE DATABASE `cusis_test`;
GRANT ALL PRIVILEGES ON cusis_test.* TO cusis@localhost IDENTIFIED BY 'cut1ckle';
-------------------
required gems:
 * extensions
 * pdf-writer
 * slimtimer4r
 * money

