* Do a mila on-site inspection when you get back in town

Now for the final Controller Adjustments:
	* Show a pop-up warning if someone tries to commit a payment w/o allocating the full amount...
	* Get the actual create/update actions working 
		* Test the case of an error in validation ( is there a limit on the method_identifier?)
		* Don't allow someone to assign more than the payment amount via standard record errors
		* Make sure that we cant submit a negative assignment value via standard record errors
	* Test to make sure that we're properly deleting Invoice assignments when we remove them in set_invoice_assignments_from_params on edit-save 
   	* Don't forget to notate the assignments on a show action

* We should add a rake task that checks for 'assignment consistency' , and makes sure that the assignments line-up as we'd expect for all invoices in the database... 
 	* We should think about what a negative invoice might do to payment tracking, and be sure to confirm this behavior in our checks

* BUG: If I try to delete a newly created client in /clients I get a 500

--- Put a beta version on mario? ...

* We shoud do the payment assignments on the invoices controller to
	* Only on the show action
	* Make the is_published a row_link
	* But - only assignments should be editable on published invoices. Once they unpublish it - we can do more...
		* The js might get tricky here
		* Nah - we can probably use the model.is_editable? to show/hide the edit button on published invoices. perfect.
	
* Double check that we're removing payment assignments on invoice unpublish..
* I think there's a bug saving invoice comments on unpublished invoices? ... (maybe its just when you're choosing no?)
 	
* reocurring payments module with rake task
	* DDC / GI / Ashbritt / Manny Kadre bills

* Assign version numbers to the invoice based on the number of times an invoice is published...
	* I don't know if we should/need-to adjust the invoice pdfs out here just yet ....
	* Might as well put this in migration 29 while we're publishing anyways

* (Install the rails-debugger on your laptop)

* Things might be a little awkward with out activity assignment if people are going back and editing old stuff... we should really have an activity selector...

* We should add an unpublished Open Invoices controller ...

* I'd like to see a payment identifier listed in the payments list ... (check no/cc#)

* Payment:::is_allocated should probably be added to a view and then list controller...
	* Code is there - but no view supports it...

* We should put tax before cost in the activities with prices controller...

* WHen Assigning employees to labr_rates - the form stays open between updates and shouldnt...

* Move_to_invoice function should allow us to Move_to '(Unassigned)', and ideally that would be a radio group

* Start using 0.8-pre on mario...

* Publish !!!!!
---------------
* all delete confirms should go through the modal box

* Probably - we should prompt on invoice update, when appropriate, whether to email the client. 
	* Probably too, publish should be a row-action and not a form control
* Probably - when prompted to delete an invoice, we should give the option to also remove the activities (or preserve them and leave them unsassigned)

* Translate the time into the local zone for the user, probably each user/client should have a zone associtation in their account.
	*  Its already stored in UTC everywhere...
	* We need to factor this into invoices too, I think

* Public interface

* Showing the Client eventlogs as an unedutable nested list  might be nice... Hell, employee eventlogs too....

* Publish !!!!!
---------------
* Slimtimer-less time entry

* CC payments handling built-in- not a plugin

* Revise the site-settings interfaces...

* Plugin interface...

* Publish 0.9 !!!!!
---------------
---------------
LONGER-TERM Features: (Needs re-prioritization...)

* We should audit for proper transaction support, and test!

* All of our read_attribute stuff, isn't "Caching"the newest values. (I think - write a test for this ...)
	* Use a find_invoice_with_totals
		* then update an invoice
		* then run an invoice.amunt(true)
		* tune run an invice.amount .... This this treturn the prior amount value?
	* THis has to be fixed/ested for all read attributes...

* Drop the VIEW hacks and de-normalize the payments/invoices tables. Just 'cache' the irksome values in here

* Better searches by using the search sql fields...

* See what we decide to do long-term with our model_view hack, maybe we can run tests on both models, as well as their view_models. Just one by one... I think thats smart...

Feature: Make the Search actually work the way we'd expect. Perhaps even make something mroe useful still that would let us filter records...

BUG: We should probably write a plugin that better displays delete errors in the flash[:error] , invoices is a good place for that
	* BTW - why does it show delete as an option here when we clearly can't delete some of these
	* Also- it'd be nice to show a pretty record error in the invoices update, if you try to update the activities on a published invoice
	* Create two invoices - both unpublished, try to delete the oldest one

* Use polymorphic relationship for sub activities
	* I really don't like the way we're uing dont_validate_type_associations. ..

* The ability to create an activity from the activities & invoices/activities list would be sweet
	* With a little pop-up that asks for the activity type?

* Emailer: 
	* <p>Please note that your current account balance, including this invoice, is: $XXX.XXX . Invoices 1,2, & 3 are outstanding. <red>Invoices 1 & 2 are past their 30 day </red> </p>
	* And change the if line to only send when there's been a change in the invoice status (See the invoice TODO...)
	* This gets a little complicated though - we have to decide if we're going to generate these warnings based on the date of the invoice, or the current situation
	
* The invoice issued_on date I think is rounding off to the end of the day on assignment. It should really be time sensitive.
	
* Better unit tests for Activity::* model. (too , make sure negative values work on whatever..)

Editable Payment amounts?
	* Probably this is a bad idea for a feature.
	However, if you change your mind, remember that part of the problem when editing payments, is that our reccomended_assignments 
	function only recommends for unpaid invoices. If you have existing assignments on the form, when you change the payment amount, you're
	going to end up with a 0.00 assignment to the invoices which were pre-existing assignments in the payment.
	* Keep in min tha  our view value caching can play havoc with some of these invoice assignments for pre-existing records if you change the amount
		* I think we need do an is_dirty? before the read attribute ...
		
Plugins for 
   * Reimbursable scanning
	* phone calls
		* The :phone_extension field, *might* be something we put into the asterisk plugin 

* An employee_rate_changed_last changed plugin would be super-useful at some point...

Nice Features:
	* Todo list.. maybe just a block? Call it an outstanding issues/projects
	* Client Notes? Probably just a google docs link
-------------------
dd if=/dev/urandom bs=200 count=1 | tr -cd 'A-Za-z0-9!@#$%^&*()_+'; echo

CREATE DATABASE `briskbills_development`;
GRANT ALL PRIVILEGES ON briskbills_development.* TO briskbills@localhost IDENTIFIED BY 'cut1ckle';

CREATE DATABASE `cusis_test`;
GRANT ALL PRIVILEGES ON cusis_test.* TO cusis@localhost IDENTIFIED BY 'cut1ckle';
-------------------
required gems:
 * extensions
 * pdf-writer
 * slimtimer4r
 * money

